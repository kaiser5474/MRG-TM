define class REST::myRestAPI

dim sampleVar1 as c
sampleVar1 = "Alpha"

function updateEncuesta as p(valorPregunta1 as n, valorPregunta2 as n, valorPregunta3 as n, valorPregunta4 as n, valorPregunta5 as n, Id_Satisfaccion as n, Check_TieneRedesSociales as l, Check_NosSigueRedesSociales as l, descripcion1 as c, descripcion2 as c, descripcion3 as c, descripcion4 as c, descripcion5 as c)
	
'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")	
	
'DIM a SQL arguments object
dim args as sql::arguments
args.Add("Pregunta_CumplimosEspectativas", valorPregunta1)
args.Add("Pregunta_RelacionCalidaPrecio", valorPregunta2) 	
args.Add("Pregunta_SistemaInformacion", valorPregunta3) 
args.Add("Pregunta_ContenidoRedesSociales", valorPregunta4) 
args.Add("Pregunta_RecomiendaServicio", valorPregunta5)  
args.Add("Id_Satisfaccion", Id_Satisfaccion)
args.Add("Check_TieneRedesSociales", Check_TieneRedesSociales)
args.Add("Check_NosSigueRedesSociales", Check_NosSigueRedesSociales)
args.Add("Pregunta_CumplimosEspectativas_Descripcion", descripcion1)
args.Add("Pregunta_RelacionCalidaPrecio_Descripcion", descripcion2)
args.Add("Pregunta_SistemaInformacion_Descripcion", descripcion3)
args.Add("Pregunta_ContenidoRedesSociales_Descripcion", descripcion4)
args.Add("Pregunta_RecomiendaServicio_Descripcion", descripcion5)

dim sql as c

sql = <<%txt%
	UPDATE N_SatisfaccionCliente
	SET 	N_SatisfaccionCliente.Pregunta_CumplimosEspectativas = :Pregunta_CumplimosEspectativas, 
	N_SatisfaccionCliente.Pregunta_RelacionCalidaPrecio = :Pregunta_RelacionCalidaPrecio, 	
	N_SatisfaccionCliente.Pregunta_SistemaInformacion = :Pregunta_SistemaInformacion, 	
	N_SatisfaccionCliente.Pregunta_ContenidoRedesSociales = :Pregunta_ContenidoRedesSociales, 	
	N_SatisfaccionCliente.Pregunta_RecomiendaServicio = :Pregunta_RecomiendaServicio, 
	N_SatisfaccionCliente.Id_EstadoFK = 2, 	N_SatisfaccionCliente.Check_TieneRedesSociales = :Check_TieneRedesSociales, 
	N_SatisfaccionCliente.Check_NosSigueRedesSociales = :Check_NosSigueRedesSociales, 	 	
	N_SatisfaccionCliente.Pregunta_CumplimosEspectativas_Descripcion = :Pregunta_CumplimosEspectativas_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_RelacionCalidaPrecio_Descripcion = :Pregunta_CumplimosEspectativas_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_SistemaInformacion_Descripcion = :Pregunta_SistemaInformacion_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_ContenidoRedesSociales_Descripcion = :Pregunta_ContenidoRedesSociales_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_RecomiendaServicio_Descripcion = :Pregunta_RecomiendaServicio_Descripcion
	WHERE N_SatisfaccionCliente.Id_Satisfaccion = :Id_Satisfaccion
%txt%

flag = cn.execute(sql,args)
dim json as c 
dim a as p
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	json = "{'res': false}"
	a = json_parse(json)
	updateEncuesta = a
	cn.close()
	else	
	json = "{'res': true}"
	a = json_parse(json)
	updateEncuesta = a
end if

'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()
end function

function paraPass as p (Userid as c, pass as c)
	'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")	
	
'dim paraPass2 as c
'paraPass2 = md5(pass)
	
'DIM a SQL arguments object
dim args as sql::arguments
args.Add("Userid", Userid)
args.Add("Pass", paraPass)

dim sql as c
sql = <<%txt%
	select passApp 
	from WebSecurityUsers 
	WHERE Userid = :Userid
%txt%

flag = cn.execute(sql,args)
dim json as c 
dim a as p
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script	
	dim errortext as c 
	errortext = cn.callresult.text
	paraPass = "{'res': false, 'res2': false, 'msg': 'Problema en la conexi\u00F3n.'}"
	a = json_parse(json)
	updateEncuesta = a
	cn.close()
	
	else	
	json = "{'res': false, 'res2': false, 'msg': 'Usuario incorrecto.'}"	

	dim rs as sql::resultset
	rs = cn.resultset
	dim paraPass3 as c
	while rs.NextRow()
		paraPass3 = rs.Data(1)
		if paraPass3 = pass then
			json = "{'res': true, 'res2': true, 'msg': 'Todo correcto.'}"
		else
			json = "{'res': true, 'res2': false, 'msg': 'Contrase\u00F1a incorrecta.'}"
		end if
	end while
	
	a = json_parse(json)
	paraPass = a
end if

'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()
end function	

function getPrefacturas as p(Userid as c)
	
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
	
dim args as sql::arguments
args.Add("Userid", Userid)
	
dim sql as c
sql = <<%txt%	
SELECT  	DISTINCT Prefacturas.id_Prefactura, Prefacturas.estado,	Prefacturas.noPrefactura, 	Prefacturas.noFactura, 	Prefacturas.valor, 	
Prefacturas.fechaCreacion, 	Contrato_ServiciosTransportacion.Descripcion AS Servicio  
FROM (Prefacturas Prefacturas 	 LEFT OUTER JOIN (WebSecurityUsers WebSecurityUsers 		 
INNER JOIN (N_Contactos N_Contactos 			 INNER JOIN N_Entidad N_Entidad 				 
ON  N_Contactos.Id_Entidad = N_Entidad.Id_Entidad ) 			 ON  WebSecurityUsers.Id_Usuario = N_Contactos.Id_Usuario ) 		 
ON  Prefacturas.id_cliente = N_Entidad.Id_Entidad  	 FULL OUTER JOIN (N_Entidad N_EntidadSubCliente 		 
LEFT OUTER JOIN (WebSecurityUsers WebSecurityUsersSubCliente 			 RIGHT OUTER JOIN N_Contactos N_ContactosSubCliente 				 
ON  WebSecurityUsersSubCliente.Id_Usuario = N_ContactosSubCliente.Id_Usuario ) 			 
ON  N_EntidadSubCliente.Id_Entidad = N_ContactosSubCliente.Id_Entidad  		 
FULL OUTER JOIN Contrato_ServiciosTransportacion Contrato_ServiciosTransportacion 			 
ON  N_EntidadSubCliente.Id_Entidad = Contrato_ServiciosTransportacion.Id_Entidad ) 		 
ON  Prefacturas.id_servicio = Contrato_ServiciosTransportacion.Id_ContratoServicioTransportacion )  
WHERE (WebSecurityUsersSubCliente.Userid = :Userid  OR  WebSecurityUsers.Userid = :Userid)  AND  Prefacturas.estado = 'Prefacturado'   
ORDER BY Prefacturas.id_Prefactura DESC
%txt%	

flag = cn.execute(sql,args)

if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
end if

'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getPrefacturas = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()

end function

function getEncuesta as p(Userid as c)
	
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
	
'DIM a SQL arguments object
dim args as sql::arguments
args.Add("Userid", Userid)

dim sql as c
sql = <<%txt%
	SELECT  	DISTINCT N_SatisfaccionCliente.Id_Satisfaccion, 	Contrato_ServiciosTransportacion.Descripcion AS Servicio, 	
	N_SatisfaccionCliente.Check_NosSigueRedesSociales, 	N_SatisfaccionCliente.Id_Cliente, 	N_SatisfaccionCliente.fechaInicio, 	
	N_SatisfaccionCliente.fechaFin, 	N_SatisfaccionCliente.Observacion, 	N_SatisfaccionCliente.Pregunta_CumplimosEspectativas, 	
	N_SatisfaccionCliente.Pregunta_RelacionCalidaPrecio, 	N_SatisfaccionCliente.Pregunta_SistemaInformacion, 	
	N_SatisfaccionCliente.Pregunta_ContenidoRedesSociales, 	N_SatisfaccionCliente.Pregunta_RecomiendaServicio, 	
	N_SatisfaccionCliente.Id_EstadoFK, 	N_SatisfaccionCliente.Check_TieneRedesSociales, 	N_SatisfaccionCliente.fechaCreacion, 	
	N_SatisfaccionCliente.creador, 	N_SatisfaccionCliente.Pregunta_CumplimosEspectativas_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_RelacionCalidaPrecio_Descripcion, 	N_SatisfaccionCliente.Pregunta_SistemaInformacion_Descripcion, 	
	N_SatisfaccionCliente.Pregunta_ContenidoRedesSociales_Descripcion, 	N_SatisfaccionCliente.Pregunta_RecomiendaServicio_Descripcion  
	FROM N_SatisfaccionCliente N_SatisfaccionCliente 	 LEFT OUTER JOIN (Contrato_ServiciosTransportacion Contrato_ServiciosTransportacion 		 
	LEFT OUTER JOIN (N_Entidad N_Entidad 			 LEFT OUTER JOIN (N_Contactos N_Contactos 				 
	LEFT OUTER JOIN WebSecurityUsers WebSecurityUsers 					 ON  N_Contactos.Id_Usuario = WebSecurityUsers.Id_Usuario ) 				 
	ON  N_Entidad.Id_Entidad = N_Contactos.Id_Entidad ) 			 ON  Contrato_ServiciosTransportacion.Id_Entidad = N_Entidad.Id_Entidad  		 
	LEFT OUTER JOIN (N_Entidad N_EntidadCliente 			 LEFT OUTER JOIN (N_Contactos N_ContactosCliente 				 
	LEFT OUTER JOIN WebSecurityUsers WebSecurityUsersCliente 					 
	ON  N_ContactosCliente.Id_Usuario = WebSecurityUsersCliente.Id_Usuario ) 				 
	ON  N_EntidadCliente.Id_Entidad = N_ContactosCliente.Id_Entidad ) 			 
	ON  Contrato_ServiciosTransportacion.Id_Cliente = N_EntidadCliente.Id_Entidad ) 		 
	ON  N_SatisfaccionCliente.Id_ServicioFK = Contrato_ServiciosTransportacion.Id_ContratoServicioTransportacion   
	WHERE N_SatisfaccionCliente.fechaCreacion >= ( GETDATE()  - 7)  
	AND ( WebSecurityUsers.Userid = :USERID  OR  WebSecurityUsersCliente.Userid = :USERID ) AND N_SatisfaccionCliente.Id_EstadoFK = 1
%txt%

flag = cn.execute(sql,args)
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	cn.close()
end if
'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getEncuesta = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()
end function

function getRecorrido as p(Userid as c)
	
dim args as sql::arguments
args.Add("Userid", Userid)

'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
dim sql as c
sql = <<%txt%
	SELECT DISTINCT      N_Recorrido.Id_Recorrido, N_Recorrido.Id_EstadoRecorrido, N_Recorrido.Id_TipoFlete, N_EntidadOrigen.Organizacion AS Origen, 
                         N_EntidadDestino.Organizacion AS Destino, N_Recorrido.FechaSalida, N_Recorrido.fechaCompletado, N_Recorrido.referenciaCliente, 
                         View_RecorridoUltimaActividad2.Observaciones AS ObservacionUltimaAct, N_Actividad.Descripcion AS Actividad, 
                         WebSecurityUsers.Userid,  Contrato_ServiciosTransportacion.Descripcion AS Servicio
             FROM        N_Entidad AS N_EntidadOrigen RIGHT OUTER JOIN
                         N_Recorrido AS N_Recorrido ON N_EntidadOrigen.Id_Entidad = N_Recorrido.Id_Origen LEFT OUTER JOIN
                         N_Entidad AS N_EntidadCliente LEFT OUTER JOIN
                         WebSecurityUsers AS WebSecurityUsers INNER JOIN
                         N_Contactos AS N_Contactos ON WebSecurityUsers.Id_Usuario = N_Contactos.Id_Usuario ON N_EntidadCliente.Id_Entidad = N_Contactos.Id_Entidad ON 
                         N_Recorrido.Id_Cliente = N_EntidadCliente.Id_Entidad LEFT OUTER JOIN
                         N_Entidad AS N_EntidadDestino ON N_Recorrido.Id_Destino = N_EntidadDestino.Id_Entidad LEFT OUTER JOIN
                         View_RecorridoUltimaActividad2 AS View_RecorridoUltimaActividad2 LEFT OUTER JOIN
                         N_Actividad AS N_Actividad ON View_RecorridoUltimaActividad2.Id_Actividad = N_Actividad.Id_Actividad ON N_Recorrido.Id_Recorrido = View_RecorridoUltimaActividad2.Id_Recorrido FULL OUTER JOIN
                         N_Entidad AS N_Entidad INNER JOIN
                         N_Contactos AS N_Contactos_1 ON N_Entidad.Id_Entidad = N_Contactos_1.Id_Entidad INNER JOIN
                         WebSecurityUsers AS WebSecurityUsers_1 ON N_Contactos_1.Id_Usuario = WebSecurityUsers_1.Id_Usuario FULL OUTER JOIN
                         Contrato_ServiciosTransportacion AS Contrato_ServiciosTransportacion ON N_Entidad.Id_Entidad = Contrato_ServiciosTransportacion.Id_Entidad ON 
                         N_Recorrido.Id_ContratoServicio = Contrato_ServiciosTransportacion.Id_ContratoServicioTransportacion
           WHERE         (WebSecurityUsers.Userid = :Userid) AND (N_Recorrido.Id_EstadoRecorrido >= 2) OR
                         (N_Recorrido.Id_EstadoRecorrido >= 2) AND (WebSecurityUsers_1.Userid = :Userid)
ORDER BY N_Recorrido.FechaSalida DESC
%txt%

flag = cn.execute(sql,args)
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	cn.close()
end if
'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getRecorrido = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()

end function

'***** funcion para obtener los datos para generar el estado de hecho dado un recorrido
function getEstadoHechos as p(Id_Recorrido as n)

dim args as sql::arguments
args.Add("Id_Recorrido", Id_Recorrido)

'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
dim sql as c
sql = <<%txt%
SELECT              	 N_Recorrido.Id_Recorrido, N_Recorrido.FechaSalida, N_Recorrido.Id_TipoTransportacion, N_Recorrido.Observaciones, N_Recorrido.Id_TipoFlete, N_Recorrido.Id_EstadoRecorrido, 
                         N_Recorrido.Id_TipoEjecucion, N_Recorrido.horaSalidaEstimada, N_Recorrido.FechaLlegadaEstimada, N_Recorrido.horaLlegadaEstimada, N_Recorrido.Id_Alcance, N_Recorrido.referenciaCliente, 
                         N_Recorrido.dashCarga, N_Recorrido.dashPickUp, N_Recorrido.dashValor, N_Recorrido.dashTiempo, N_Recorrido.dashTiempoAct, N_Recorrido.tiempoReal, N_Recorrido.tiempoEstimado, 
                         N_Recorrido.dashDocumento, N_Recorrido.prefacturado, N_Recorrido.horasExtras, N_Recorrido.tieneCargaSegura, N_Recorrido.diasPrefactura, N_Recorrido.TieneImagenActividad, N_Recorrido.tieneBL, 
                         N_Recorrido.tieneCertificadosTerceros, N_Recorrido.tieneDeclaracionAduanas, N_Recorrido.tieneDocumentosPrevios, N_Recorrido.tieneEntregaOfertas, N_Recorrido.tieneFacturaComercial, 
                         N_Recorrido.tieneGerenciamientoViaje, N_Recorrido.tieneGuiaTerceros, N_Recorrido.tieneInformesInternos, N_Recorrido.tieneInstruccionesPermanentes, N_Recorrido.tieneListaEmpaque, 
                         N_Recorrido.tienePoliza, N_Recorrido.tieneTransporteNacional, N_Recorrido.tieneCheckList, N_Recorrido.tieneReporteDiarioTrabajo, N_Recorrido.tieneCGOrigen, N_Recorrido.paraDocIP, 
                         N_Recorrido.Id_ServicioFacturacion, N_Entidad_Origen.Organizacion AS LugarOrigen1, N_Entidad_Destino.Organizacion AS LugarDestino1, N_Entidad_Cliente.Organizacion, 
                         RecMedTranspRepAct.Id_RecMedTranspRepAct, RecMedTranspRepAct.Id_Recorrido AS Expr1, RecMedTranspRepAct.Fecha, RecMedTranspRepAct.HoraDesde, RecMedTranspRepAct.HoraHasta, 
                         RecMedTranspRepAct.Tiempo, RecMedTranspRepAct.Id_Actividad, RecMedTranspRepAct.Calado, RecMedTranspRepAct.NivelRio, RecMedTranspRepAct.Id_Lugar, RecMedTranspRepAct.FechaLugarSiguiente, 
                         RecMedTranspRepAct.HoraLugarSiguiente, RecMedTranspRepAct.Id_LugarSiguientes, RecMedTranspRepAct.FechaHoraDesde, RecMedTranspRepAct.FechaHoraHasta, 
                         RecMedTranspRepAct.Observaciones AS Expr2, RecMedTranspRepAct.FechaHasta, RecMedTranspRepAct.Id_RecMedTransp_Origen, RecMedTranspRepAct.TiempoActividad, RecMedTranspRepAct.Valor, 
                         RecMedTranspRepAct.Moneda, RecMedTranspRepAct.ValorFinal, RecMedTranspRepAct.MonedaFinal, RecMedTranspRepAct.Id_RecMedTransp_Transp, RecMedTranspRepAct.Id_RecMedTransp_Destino, 
                         RecMedTranspRepAct.ValorCompra, RecMedTranspRepAct.MonedaCompra, RecMedTranspRepAct.ValorCompraFinal, RecMedTranspRepAct.MonedaCompraFinal, RecMedTranspRepAct.Documento, 
                         RecMedTranspRepAct.Extension, RecMedTranspRepAct.Archivo, RecMedTranspRepAct.valorGanancia, RecMedTranspRepAct.valorFinanciamiento, RecMedTranspRepAct.ValorFinalEstimado, 
                         RecMedTranspRepAct.MonedaFinalEstimado, RecMedTranspRepAct.Id_RecMedTransp_OrigenCM, RecMedTranspRepAct.Id_RecMedTransp_DestinoCM, RecMedTranspRepAct.Id_RecMedTransp_TranspCM, 
                         RecMedTranspRepAct.Id_RecMedTransp, RecMedTranspRepAct.mostrarPrefactura, RecMedTranspRepAct.sumaTiempo, RecMedTranspRepAct.facturaProveedores, RecMedTranspRepAct.Id_FacturaProveedor, 
                         RecMedTranspRepAct.pagadoTotal, RecMedTranspRepAct.esReembolsable, RecMedTranspRepAct.prepaid, RecMedTranspRepAct.collect, RecMedTranspRepAct.Id_SiglaEspera_FK, 
                         RecMedTranspRepAct.otherCharge, RecMedTranspRepAct.valorXTonelada, RecMedTranspRepAct.pesoCarga, RecMedTranspRepAct.valorInspeccionMensual, RecMedTranspRepAct.noFormulario, 
                         Contrato_ServiciosTransportacion.Descripcion AS Servicio, N_Contrato.NoContrato AS Contrato, N_Entidad_Lugar.Organizacion AS Lugar, N_Actividad.Descripcion AS Actividad, 
                         N_Entidad_2.Organizacion AS ProximoLugar, N_Actividad.LugarSiguiente, N_Entidad_Origen.Referencia AS LugarOrigen, N_Entidad_Destino.Referencia AS LugarDestino, 
                         N_Entidad_Cliente.Referencia AS Cliente, N_Recorrido.numeroReferendo
FROM            		 N_Recorrido AS N_Recorrido LEFT OUTER JOIN
                         RecMedTranspRepAct AS RecMedTranspRepAct LEFT OUTER JOIN
                         N_Actividad AS N_Actividad ON RecMedTranspRepAct.Id_Actividad = N_Actividad.Id_Actividad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Lugar ON RecMedTranspRepAct.Id_Lugar = N_Entidad_Lugar.Id_Entidad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_2 ON RecMedTranspRepAct.Id_LugarSiguientes = N_Entidad_2.Id_Entidad ON N_Recorrido.Id_Recorrido = RecMedTranspRepAct.Id_Recorrido INNER JOIN
                         N_Entidad AS N_Entidad_Cliente ON N_Recorrido.Id_Cliente = N_Entidad_Cliente.Id_Entidad INNER JOIN
                         N_Contrato AS N_Contrato ON N_Recorrido.Id_Contrato = N_Contrato.Id_Contrato INNER JOIN
                         Contrato_ServiciosTransportacion AS Contrato_ServiciosTransportacion ON N_Recorrido.Id_ContratoServicio = Contrato_ServiciosTransportacion.Id_ContratoServicioTransportacion LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Origen ON N_Recorrido.Id_Origen = N_Entidad_Origen.Id_Entidad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Destino ON N_Recorrido.Id_Destino = N_Entidad_Destino.Id_Entidad
WHERE        			(RecMedTranspRepAct.Fecha IS NOT NULL) AND (RecMedTranspRepAct.FechaHasta IS NOT NULL) AND (N_Actividad.estaReportes = 1) AND (N_Recorrido.Id_Recorrido = :Id_Recorrido)
ORDER BY 				RecMedTranspRepAct.FechaHasta, RecMedTranspRepAct.Fecha, RecMedTranspRepAct.HoraHasta, RecMedTranspRepAct.HoraDesde
%txt%	

flag = cn.execute(sql,args)
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	cn.close()
end if
'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getEstadoHechos = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()
end function

'***** funcion para obtener los datos para generar el estado de hecho dado un recorrido
function getManifiestaCarga as p(Id_Recorrido as n)

dim args as sql::arguments
args.Add("Id_Recorrido", Id_Recorrido)

'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
dim sql as c
sql = <<%txt%
SELECT              	 N_Recorrido.Id_Recorrido, N_Recorrido.FechaSalida, N_Recorrido.Id_TipoTransportacion, N_Recorrido.Observaciones, N_Recorrido.Id_TipoFlete, N_Recorrido.Id_EstadoRecorrido, 
                         N_Recorrido.Id_TipoEjecucion, N_Recorrido.horaSalidaEstimada, N_Recorrido.FechaLlegadaEstimada, N_Recorrido.horaLlegadaEstimada, N_Recorrido.Id_Alcance, N_Recorrido.referenciaCliente, 
                         N_Recorrido.dashCarga, N_Recorrido.dashPickUp, N_Recorrido.dashValor, N_Recorrido.dashTiempo, N_Recorrido.dashTiempoAct, N_Recorrido.tiempoReal, N_Recorrido.tiempoEstimado, 
                         N_Recorrido.dashDocumento, N_Recorrido.prefacturado, N_Recorrido.horasExtras, N_Recorrido.tieneCargaSegura, N_Recorrido.diasPrefactura, N_Recorrido.TieneImagenActividad, N_Recorrido.tieneBL, 
                         N_Recorrido.tieneCertificadosTerceros, N_Recorrido.tieneDeclaracionAduanas, N_Recorrido.tieneDocumentosPrevios, N_Recorrido.tieneEntregaOfertas, N_Recorrido.tieneFacturaComercial, 
                         N_Recorrido.tieneGerenciamientoViaje, N_Recorrido.tieneGuiaTerceros, N_Recorrido.tieneInformesInternos, N_Recorrido.tieneInstruccionesPermanentes, N_Recorrido.tieneListaEmpaque, 
                         N_Recorrido.tienePoliza, N_Recorrido.tieneTransporteNacional, N_Recorrido.tieneCheckList, N_Recorrido.tieneReporteDiarioTrabajo, N_Recorrido.tieneCGOrigen, N_Recorrido.paraDocIP, 
                         N_Recorrido.Id_ServicioFacturacion, N_Entidad_Origen.Organizacion AS LugarOrigen1, N_Entidad_Destino.Organizacion AS LugarDestino1, N_Entidad_Cliente.Organizacion, 
                         RecMedTranspRepAct.Id_RecMedTranspRepAct, RecMedTranspRepAct.Id_Recorrido AS Expr1, RecMedTranspRepAct.Fecha, RecMedTranspRepAct.HoraDesde, RecMedTranspRepAct.HoraHasta, 
                         RecMedTranspRepAct.Tiempo, RecMedTranspRepAct.Id_Actividad, RecMedTranspRepAct.Calado, RecMedTranspRepAct.NivelRio, RecMedTranspRepAct.Id_Lugar, RecMedTranspRepAct.FechaLugarSiguiente, 
                         RecMedTranspRepAct.HoraLugarSiguiente, RecMedTranspRepAct.Id_LugarSiguientes, RecMedTranspRepAct.FechaHoraDesde, RecMedTranspRepAct.FechaHoraHasta, 
                         RecMedTranspRepAct.Observaciones AS Expr2, RecMedTranspRepAct.FechaHasta, RecMedTranspRepAct.Id_RecMedTransp_Origen, RecMedTranspRepAct.TiempoActividad, RecMedTranspRepAct.Valor, 
                         RecMedTranspRepAct.Moneda, RecMedTranspRepAct.ValorFinal, RecMedTranspRepAct.MonedaFinal, RecMedTranspRepAct.Id_RecMedTransp_Transp, RecMedTranspRepAct.Id_RecMedTransp_Destino, 
                         RecMedTranspRepAct.ValorCompra, RecMedTranspRepAct.MonedaCompra, RecMedTranspRepAct.ValorCompraFinal, RecMedTranspRepAct.MonedaCompraFinal, RecMedTranspRepAct.Documento, 
                         RecMedTranspRepAct.Extension, RecMedTranspRepAct.Archivo, RecMedTranspRepAct.valorGanancia, RecMedTranspRepAct.valorFinanciamiento, RecMedTranspRepAct.ValorFinalEstimado, 
                         RecMedTranspRepAct.MonedaFinalEstimado, RecMedTranspRepAct.Id_RecMedTransp_OrigenCM, RecMedTranspRepAct.Id_RecMedTransp_DestinoCM, RecMedTranspRepAct.Id_RecMedTransp_TranspCM, 
                         RecMedTranspRepAct.Id_RecMedTransp, RecMedTranspRepAct.mostrarPrefactura, RecMedTranspRepAct.sumaTiempo, RecMedTranspRepAct.facturaProveedores, RecMedTranspRepAct.Id_FacturaProveedor, 
                         RecMedTranspRepAct.pagadoTotal, RecMedTranspRepAct.esReembolsable, RecMedTranspRepAct.prepaid, RecMedTranspRepAct.collect, RecMedTranspRepAct.Id_SiglaEspera_FK, 
                         RecMedTranspRepAct.otherCharge, RecMedTranspRepAct.valorXTonelada, RecMedTranspRepAct.pesoCarga, RecMedTranspRepAct.valorInspeccionMensual, RecMedTranspRepAct.noFormulario, 
                         Contrato_ServiciosTransportacion.Descripcion AS Servicio, N_Contrato.NoContrato AS Contrato, N_Entidad_Lugar.Organizacion AS Lugar, N_Actividad.Descripcion AS Actividad, 
                         N_Entidad_2.Organizacion AS ProximoLugar, N_Actividad.LugarSiguiente, N_Entidad_Origen.Referencia AS LugarOrigen, N_Entidad_Destino.Referencia AS LugarDestino, 
                         N_Entidad_Cliente.Referencia AS Cliente, N_Recorrido.numeroReferendo
FROM            		 N_Recorrido AS N_Recorrido LEFT OUTER JOIN
                         RecMedTranspRepAct AS RecMedTranspRepAct LEFT OUTER JOIN
                         N_Actividad AS N_Actividad ON RecMedTranspRepAct.Id_Actividad = N_Actividad.Id_Actividad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Lugar ON RecMedTranspRepAct.Id_Lugar = N_Entidad_Lugar.Id_Entidad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_2 ON RecMedTranspRepAct.Id_LugarSiguientes = N_Entidad_2.Id_Entidad ON N_Recorrido.Id_Recorrido = RecMedTranspRepAct.Id_Recorrido INNER JOIN
                         N_Entidad AS N_Entidad_Cliente ON N_Recorrido.Id_Cliente = N_Entidad_Cliente.Id_Entidad INNER JOIN
                         N_Contrato AS N_Contrato ON N_Recorrido.Id_Contrato = N_Contrato.Id_Contrato INNER JOIN
                         Contrato_ServiciosTransportacion AS Contrato_ServiciosTransportacion ON N_Recorrido.Id_ContratoServicio = Contrato_ServiciosTransportacion.Id_ContratoServicioTransportacion LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Origen ON N_Recorrido.Id_Origen = N_Entidad_Origen.Id_Entidad LEFT OUTER JOIN
                         N_Entidad AS N_Entidad_Destino ON N_Recorrido.Id_Destino = N_Entidad_Destino.Id_Entidad
WHERE        			(RecMedTranspRepAct.Fecha IS NOT NULL) AND (RecMedTranspRepAct.FechaHasta IS NOT NULL) AND (N_Actividad.estaReportes = 1) AND (N_Recorrido.Id_Recorrido = :Id_Recorrido)
ORDER BY 				RecMedTranspRepAct.FechaHasta, RecMedTranspRepAct.Fecha, RecMedTranspRepAct.HoraHasta, RecMedTranspRepAct.HoraDesde
%txt%	

flag = cn.execute(sql,args)
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	cn.close()
end if
'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getEstadoHechos = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()
end function


	
'**** funcion para obtener el listado de trabajadores activos	
function getRRHH as p()
	
	'DIM a SQL arguments object
dim args as sql::arguments


'DIM an Xbasic AlphaDAO connection object
dim cn as sql::connection
dim flag as l
''open the connection object to connect to the Database
flag = cn.open("::Name::Nibble")
dim sql as c
sql = <<%txt%
SELECT  N_FichaTrabajadores.Id_Trabajador, 	N_Areas.Descripcion AS Area, N_FichaTrabajadores.FechaNacimiento, N_FichaTrabajadores.Observaciones, 
N_FichaTrabajadores.EstadoCivil, N_FichaTrabajadores.Sexo, N_FichaTrabajadores.FechaContrato,
((('(+' + N_Pais.PrefijoTelefonico) + ') ') + N_FichaTrabajadores.MobileTelephoneNumber) AS Movil, 	
N_FichaTrabajadores.Imagen, 	N_FichaTrabajadores.EmailAddress1, 	N_FichaTrabajadores.CodIdentidad, 	
((((N_FichaTrabajadores.PrimerNombre + ' ') + N_FichaTrabajadores.SegundoNombre) + ' ') + N_FichaTrabajadores.Apellido) AS NombreTrabajador,  
N_Pais.DescripcionEspanol AS Nacionalidad
FROM (N_FichaTrabajadores N_FichaTrabajadores 	 LEFT OUTER JOIN N_Pais N_Pais 		 ON  N_FichaTrabajadores.Id_PaisMobileTelephone = N_Pais.Id_Pais  	 
LEFT OUTER JOIN N_Areas N_Areas 		 ON  N_FichaTrabajadores.Id_AreaComercial = N_Areas.Id_Areas )  
WHERE N_FichaTrabajadores.Activo = 1	
%txt%
'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
'execute the SQL - pass in the sql::arguments object
flag = cn.execute(sql,args)
if flag = .f. then 
	'an error occurred - get the error message from cn.callresult.text 
	'report the error, close the database and then end the script
	dim errortext as c 
	errortext = cn.callresult.text
	cn.close()
end if
'DIM a SQL::Resultset object
dim rs as sql::resultset
rs = cn.resultset
'get the JSON from the query
dim json as c 
json = rs.toJSON()
dim a as p
a = json_parse(json)
getRRHH = a
'Clean up by freeing the resultset and then closing the database
cn.freeresult()
cn.close()

	'self.__ http_status = 200
end function
'SELECT  N_FichaTrabajadores.Id_Trabajador, 	N_Areas.Descripcion AS Area, 	((('(+' + N_Pais.PrefijoTelefonico) + ') ') + N_FichaTrabajadores.MobileTelephoneNumber) AS Movil, 	N_FichaTrabajadores.Imagen, 	N_FichaTrabajadores.EmailAddress1, 	N_FichaTrabajadores.CodIdentidad, 	((((N_FichaTrabajadores.PrimerNombre + ' ') + N_FichaTrabajadores.SegundoNombre) + ' ') + N_FichaTrabajadores.Apellido) AS NombreTrabajador  FROM (N_FichaTrabajadores N_FichaTrabajadores 	 LEFT OUTER JOIN N_Pais N_Pais 		 ON  N_FichaTrabajadores.Id_PaisMobileTelephone = N_Pais.Id_Pais  	 LEFT OUTER JOIN N_Areas N_Areas 		 ON  N_FichaTrabajadores.Id_AreaComercial = N_Areas.Id_Areas )  WHERE N_FichaTrabajadores.Activo = 1	
end class	